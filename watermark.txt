<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Watermark Generator</title>
    <style>
        /* Basic reset */
        body, html {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }

        /* Main content container */
        .container {
            text-align: center;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 600px;
            overflow: scroll;
            margin: auto;
        }

        h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }

        input, select, button {
            margin: 10px;
        }

        input[type="file"] {
            margin-top: 20px;
        }

        .image-preview {
            margin-top: 20px;
            position: relative;
        }

        .image-thumbnails {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-top: 20px;
        }

        .image-thumbnails img {
            width: 100px;
            height: auto;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
        }

        canvas {
            max-width: 100%;
            border: 1px solid #ccc;
        }

        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 20px;
        }

        button:hover {
            background-color: #45a049;
        }

    </style>
</head>
<body>

    

    <!-- Watermark Generator Content -->
    <div class="container">
        <h1>Watermark Image Generator</h1>

        <!-- Image Upload Section -->
        <input type="file" id="imageInput" accept="image/*" multiple>

        <!-- Watermark Options -->
        <div class="options">
            <label for="watermarkImage">Watermark Image:</label>
            <input type="file" id="watermarkImage" accept="image/*">

            <label for="opacity">Opacity:</label>
            <input type="range" id="opacity" min="0" max="1" step="0.01" value="0.7">
        </div>

        <div class="image-preview">
            <canvas id="canvas"></canvas>
        </div>

        <button id="downloadBtn">Download All Watermarked Images</button>
    </div>

    <div class="image-thumbnails" id="thumbnails"></div>

    <script>
        const imageInput = document.getElementById("imageInput");
        const watermarkImageInput = document.getElementById("watermarkImage");
        const opacityInput = document.getElementById("opacity");
        const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");
        const downloadBtn = document.getElementById("downloadBtn");
        const thumbnailsContainer = document.getElementById("thumbnails");

        let selectedImages = [];
        let watermarkImage = null;

        // Update canvas with watermark applied
        function updateCanvas(image) {
            const opacity = opacityInput.value;

            // Clear the canvas and redraw the image
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(image, 0, 0, canvas.width, canvas.height);

            if (watermarkImage) {
                ctx.globalAlpha = opacity;

                // Set watermark position at 5% of image width and 40% of image height
                const x = image.width * 0.25; // 30% of image width
                const y = image.height * 0.4; // 40% of image height

                // Resize watermark image if it's too big
                const watermarkWidth = image.width * 0.2; // 20% of image width
                const watermarkHeight = watermarkImage.height * (watermarkWidth / watermarkImage.width);

                ctx.drawImage(watermarkImage, x, y, watermarkWidth, watermarkHeight);
            }
        }

        // Handle image input (multiple images)
        imageInput.addEventListener("change", (e) => {
            const files = e.target.files;

            selectedImages = [];
            thumbnailsContainer.innerHTML = ""; // Clear existing thumbnails

            // Read each selected image
            Array.from(files).forEach((file) => {
                // Check if the file is an image
                if (file.type.startsWith("image/")) {
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        const img = new Image();
                        img.onload = function () {
                            selectedImages.push(img);
                            
                            // Create a thumbnail for the image
                            const thumbnail = document.createElement("img");
                            thumbnail.src = event.target.result;
                            thumbnail.addEventListener("click", () => {
                                canvas.width = img.width;
                                canvas.height = img.height;
                                updateCanvas(img);
                            });
                            thumbnailsContainer.appendChild(thumbnail);
                        };
                        img.src = event.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            });
        });

        // Handle watermark image upload
        watermarkImageInput.addEventListener("change", (e) => {
            const file = e.target.files[0];

            if (file && file.type.startsWith("image/")) {
                const reader = new FileReader();
                reader.onload = function (event) {
                    const img = new Image();
                    img.onload = function () {
                        watermarkImage = img;

                        // Redraw the current image with the new watermark
                        if (selectedImages.length > 0) {
                            updateCanvas(selectedImages[0]);
                        }
                    };
                    img.src = event.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        // Update the canvas whenever user changes opacity
        opacityInput.addEventListener("input", () => {
            if (selectedImages.length > 0) {
                updateCanvas(selectedImages[0]);
            }
        });

        // Download all watermarked images individually
        downloadBtn.addEventListener("click", () => {
            if (selectedImages.length > 0 && watermarkImage) {
                const opacity = opacityInput.value;

                // Loop over all selected images
                selectedImages.forEach((image, index) => {
                    const canvasTemp = document.createElement("canvas");
                    const ctxTemp = canvasTemp.getContext("2d");
                    canvasTemp.width = image.width;
                    canvasTemp.height = image.height;

                    // Draw the image
                    ctxTemp.drawImage(image, 0, 0, canvasTemp.width, canvasTemp.height);

                    // Draw the watermark
                    ctxTemp.globalAlpha = opacity;
                    const x = image.width * 0.05;
                    const y = image.height * 0.4;
                    const watermarkWidth = image.width * 0.2;
                    const watermarkHeight = watermarkImage.height * (watermarkWidth / watermarkImage.width);
                    ctxTemp.drawImage(watermarkImage, x, y, watermarkWidth, watermarkHeight);

                    // Convert the canvas to a JPEG and trigger the download
                    canvasTemp.toBlob((blob) => {
                        const a = document.createElement("a");
                        a.href = URL.createObjectURL(blob);
                        a.download = `watermarked-image-${index + 1}.jpg`;  // Change file extension to .jpg
                        a.click();
                    }, 'image/jpeg');  // Ensure the blob is created as JPEG
                });
            }
        });
    </script>

</body>
</html>
